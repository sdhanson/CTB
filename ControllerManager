using UnityEngine;
using System.Collections;
using System.IO;

public class ControllerManager : MonoBehaviour 
{

	private PrimitiveType sphere = PrimitiveType.Sphere;
	private Vector3 pos = new Vector3();
	string currentFileName;
	string currentFilePath;

	string folderPath = @"Assets/TextFiles";
	public List<string> nameList = new List<string>(new string[] { "EmotionA", "EmotionB", "EmotionC" });
	
	public bool triggerButtonPressed = false;
	private Valve.VR.EVRButtonId triggerButton = Valve.VR.EVRButtonId.k_EButton_SteamVR_Trigger;

	private SteamVR_Controller.Device controller {
		get {
			return SteamVR_Controller.Input ((int)trackedObj.index);
		}
	}

	private SteamVR_TrackedObject trackedObj;

	void Start()
	{
		trackedObj = GetComponent<SteamVR_TrackedObject>();
		pos = trackedObj.transform.position;
		CheckFiles ();
		SettingCurrentFile ();
	}

	void Update()
	{
		//spawns a sphere whenever the trigger button is in the "pressed" position
		triggerButtonPressed = controller.GetPress (triggerButton);
		if (triggerButtonPressed) {
			SpawnCurrentPrimitiveAtController ();
		}
	}
	
		private void CheckFiles () {
		var info = new DirectoryInfo(folderPath);
		var fileInfo = info.GetFiles();

		if (fileInfo.Length == 0) { //aka there are no files in the Text files folder
			foreach (string fileName in nameList) {
				using (StreamWriter sw = File.CreateText (string.Format(@"Assets/TextFiles/{0}.txt", fileName))) {//create all of the files
				}
			}

		} else if (fileInfo.Length != 0) { //aka there are 1+ files in the Text files folder
			foreach (string fileName in nameList) { //repeat the below process for each file in the list
				string filePath = string.Format (@"Assets/TextFiles/{0}.txt", fileName); //set the right filePath
				FileInfo f = new FileInfo(filePath); //get the file info from the file

				if (File.Exists (fileName)) { // see if the file exists
					if (f.Length != 0) { //check if it is written in using file info :)
						Debug.Log ("You are overwriting previous data. Please remove text files from the assets folder."); //warn the user that the file already exists and they need to save the data and move on
					} else if (f.Length == 0) { //check if the file is not written in using file info :) 
						Debug.Log("good");//Do something that allows to continue
					}
				}
				else if (!File.Exists(fileName)) { //if the file does not exists
					using (StreamWriter sw = File.CreateText (string.Format(@"Assets/TextFiles/{0}.txt", fileName))) {//create all of the files
					}	
				}
			}
		}

	}

	private void SettingCurrentFile() {
		foreach (string fileName in nameList) { //repeat the below process for each file in the list
			string filePath = string.Format (@"Assets/TextFiles/{0}.txt", fileName); //set the right filePath
			FileInfo f = new FileInfo (filePath); //get the file info from the file
			
			if (f.Length != 0) { //check if it is written in using file info :)
				 //warn the user that the file already exists and they need to save the data and move on
			} else if (f.Length == 0) { //check if the file is not written in using file info :) 
				//if (fileName == HUD.text) --> once HUD text is added, will be able to check if you are writing the right emotion in the right file
				currentFileName = fileName;
				currentFilePath = filePath;
			}
		}
	}

	private void SpawnCurrentPrimitiveAtController()
	{
		var spawnedPrimitive = GameObject.CreatePrimitive(sphere);
		spawnedPrimitive.transform.position = transform.position;
		spawnedPrimitive.transform.rotation = transform.rotation;
		spawnedPrimitive.transform.localScale = new Vector3(0.05f, 0.05f, 0.05f); // sphere size
		
		//sets the red/blue areas and changes the sphere colors
		Renderer r = spawnedPrimitive.GetComponent<Renderer> ();
		if (transform.position.x > pos.x) { 
			r.material.color = Color.red;
		} 
		else {
			r.material.color = Color.blue;
		}

		using (StreamWriter cp = new StreamWriter (currentFilePath, true)) {
			cp.WriteLine ("SpherePositions: {0}", spawnedPrimitive.transform.position);
		}
	}
}
